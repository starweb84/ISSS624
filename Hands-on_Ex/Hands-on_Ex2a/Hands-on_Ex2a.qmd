---
title: "Hands-on Exercise 2a: Global Measures of Spatial Autocorrelation"
date: "22 November 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning: false
editor: visual
---

## **1 Overview**

In this hands-on exercise, I will learn how to compute Global and Local Measure of Spatial Autocorrelation (GLSA) by using **spdep** package. By the end to this hands-on exercise, I will be able to:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;

-   compute Getis-Ord's Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and

-   to visualise the analysis output by using **tmap** package.

## **2 Getting Started**

### **2.1 The analytical question**

In spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be "is there sign of spatial clustering?". And, if the answer for this question is yes, then our next question will be "where are these clusters?"

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)

### **2.2 The Study Area and Data**

Two data sets will be used in this hands-on exercise, they are:

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan's local development indicators in 2012.

### **2.3 Setting the Analytical Toolls**

Before we get started, we need to ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed in R.

-   sf is use for importing and handling geospatial data in R,

-   tidyverse is mainly use for wrangling attribute data in R,

-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   tmap will be used to prepare cartographic quality chropleth map.

The code chunk below is used to perform the following tasks:

-   creating a package list containing the necessary R packages,

-   checking if the R packages in the package list have been installed in R,

    -   if they have yet to be installed, RStudio will installed the missing packages,

-   launching the packages into R environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## **3 Getting the Data Into R Environment**

In this section, I will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

### **3.1 Import shapefile into r environment**

The code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### **3.2 Import csv file into r environment**

Next, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R data frame class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### **3.3 Performing relational join**

The code chunk below will be used to update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

### **3.4 Visualising Regional Development Indicator**

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## **4 Global Spatial Autocorrelation**

In this section, I will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

### **4.1 Computing Contiguity Spatial Weights**

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

In the code chunk below, [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If I look at the documentation I will see that I can pass a "queen" argument that takes TRUE or FALSE as options. If I do not specify this argument the default is set to TRUE, that is, if I don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

More specifically, the code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.

### **4.2 Row-standardised weights matrix**

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

The input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.

style can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

If zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

### **4.3 Global Spatial Autocorrelation: Moran's I**

In this section, I will learn how to perform Moran's I statistics testing by using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

### **4.4 Maron's I test**

The code chunk below performs Moran's I statistical testing using [*moran.test()*](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

Question: What statistical conclusion can you draw from the output above? Ans: Based on this output, I can make the following statistical conclusion:

-   The Moran I statistic standard deviate of 4.7351 is quite large, indicating a significant positive spatial autocorrelation.

-   The p-value is very small (1.095e-06), much smaller than the conventional significance levels (e.g., 0.05). Therefore, I reject the null hypothesis of no spatial autocorrelation. The alternative hypothesis is "greater," suggesting that there is a positive spatial autocorrelation.

-   In summary, the output suggests strong evidence of positive spatial autocorrelation in the variable represented by hunan\$GDPPC based on the specified spatial weights matrix (rswm_q).

#### 4.4.1 Computing Monte Carlo Moran's I

The code chunk below performs permutation test for Moran's I statistic by using [*moran.mc()*](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

Question: What statistical conclustion can you draw from the output above? Based on this output, I can make the following statistical conclusion:

-   The observed Moran I statistic of 0.30075 falls within the distribution of simulated values.

-   The p-value of 0.001 is less than the conventional significance level of 0.05, suggesting strong evidence to reject the null hypothesis. The alternative hypothesis is "greater," indicating a positive spatial autocorrelation.

-   In summary, the permutation test supports the findings from the Moran I test, indicating a statistically significant positive spatial autocorrelation in the variable represented by hunan\$GDPPC based on the specified spatial weights matrix (rswm_q).

#### 4.4.2 Visualising Monte Carlo Moran's I

It is always a good practice for us the examine the simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below [*hist()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [*abline()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

Question: What statistical observation can you draw from the output above? The observed Moran's I value appears to be statistically significant and is located in the tail of the distribution, supporting the conclusion of a positive spatial autocorrelation in the variable represented by hunan\$GDPPC based on the specified spatial weights matrix (rswm_q).

Challenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.

```{r}
# Create a data frame for ggplot
hist_data <- data.frame(values = bperm$res)

# Plot the histogram using ggplot2
ggplot(hist_data, aes(x = values)) +
  geom_histogram(binwidth = 0.02, fill = "blue", color = "white", alpha = 0.7) +
  labs(title = "Distribution of Simulated Moran's I",
       x = "Simulated Moran's I") +
  theme_minimal() +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", size = 1) +
  annotate("text", x = 0.1, y = 60, label = "Observed\nMoran's I", color = "red", size = 4)
```

### **4.5 Global Spatial Autocorrelation: Geary's**

In this section, I will learn how to perform Geary's c statistics testing by using appropriate functions of **spdep** package.

#### 4.5.1 Geary's C test

The code chunk below performs Geary's C test for spatial autocorrelation by using [*geary.test()*](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

Question: What statistical conclusion can you draw from the output above?

-   The Geary C statistic standard deviate of 3.6108 is quite large, indicating a significant departure from the expectation under the null hypothesis of no spatial autocorrelation.

-   The p-value is very small (0.0001526), much smaller than the conventional significance levels (e.g., 0.05). Therefore, I reject the null hypothesis of no spatial autocorrelation.

-   The alternative hypothesis is "Expectation greater than statistic," suggesting that the observed Geary C statistic is less than the expected value under the assumption of no spatial autocorrelation.

-   The Geary C statistic itself is 0.6907223, which is less than 1, further supporting the conclusion of negative spatial autocorrelation.

In summary, the output suggests strong evidence of negative spatial autocorrelation in the variable represented by hunan\$GDPPC based on the specified spatial weights matrix (rswm_q).

#### 4.5.2 Computing Monte Carlo Geary's C

The code chunk below performs permutation test for Geary's C statistic by using [*geary.mc()*](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

Question: What statistical conclusion can you draw from the output above?

-   The observed Geary's C statistic of 0.69072 falls within the distribution of simulated values.

-   The p-value of 0.001 is less than the conventional significance level of 0.05, suggesting strong evidence to reject the null hypothesis.

-   The alternative hypothesis is "greater," indicating that the observed Geary's C statistic is greater than expected under the assumption of no spatial autocorrelation.

In summary, the permutation test supports the conclusion that there is a statistically significant positive spatial autocorrelation in the variable represented by hunan\$GDPPC based on the specified spatial weights matrix (rswm_q).

#### 4.5.3 Visualising the Monte Carlo Geary's C

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

Question: What statistical observation can you draw from the output?

-   The mean value of the simulated Geary's C is close to 1, indicating that under the null hypothesis of no spatial autocorrelation, the expected value of Geary's C is 1.

-   The histogram provides a visual representation of the distribution of simulated Geary's C values. The observed Geary's C value falls to the left of the distribution, suggesting that the observed spatial autocorrelation is lower than what would be expected by random chance.

-   The red vertical line at 1 indicates the position of the observed Geary's C value within the distribution.

In summary, the observed Geary's C value appears to be statistically significant and is located in the tail of the distribution, supporting the conclusion of a positive spatial autocorrelation in the variable represented by hunan\$GDPPC based on the specified spatial weights matrix (rswm_q).

## **5 Spatial Correlogram**

Spatial correlograms are great to examine patterns of spatial autocorrelation in  data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### **5.1 Compute Moran's I correlogram**

In the code chunk below, [*sp.correlogram()*](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran's I. The **plot()** of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

Question: What statistical observation can you draw from the plot above?

The "estimate" column represents the observed Moran's I values at each lag. The "expectation" column provides the expected Moran's I values under the assumption of no spatial autocorrelation. Positive values suggest positive spatial autocorrelation, while negative values suggest negative spatial autocorrelation.

The spatial correlogram and the analysis results suggest the presence of spatial autocorrelation in hunan\$GDPPC, and the significance codes indicate which distance lags are statistically significant.

### **5.2 Compute Geary\'s C correlogram and plot**

In the code chunk below, *sp.correlogram()* of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary\'s C. The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```
Similar to the previous step, we will print out the analysis report by using the code chunk below.

```{r}
print(GC_corr)
```


